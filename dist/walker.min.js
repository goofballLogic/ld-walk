const t={walk(t,e={}){const n=e.jsonld,a=e["ld-query"];return{pathContext:t,from:function(t,e){return{pathContext:t,walkFrom:e,to:(r,c)=>async function t({pathContext:e,walkFrom:r,walkTo:c,lastFetched:s,query:i,suppressFinalDereferencing:u}){const l=await async function(t,e){const a={"@context":t,"@graph":e.split(" ").map((function(t){return{[t]:[]}}))};return(await n.expand(a)).map(t=>Object.keys(t)[0])}(e,c);s||(i=await o(r),s=r);let d=0;for(;i&&i.query&&l.length;){const t=l.shift();d++;const e=`> ${t}`;let n=i.query(e);if(!n){const t=i.query("> @id");if(t){s=t;const a=await o(t);n=a&&a.query(e)}}i=n}if(!u&&i&&i.query){const t=i.query("> @id");t&&t!==s&&(i=await o(t)||i)}const f=c.split(" "),p={walked:f.slice(0,d),toQuery:t=>i&&a(i.json(),t||{}),continueTo:(n,a)=>i?t({...a,pathContext:e,walkTo:n,lastFetched:s,query:i}):p,succeeded:!!i};p.succeeded||(p.notWalked=f.slice(d));return p}({...c,pathContext:t,walkFrom:e,walkTo:r})}}.bind(this,t)};async function o(t){try{const e=await n.expand(t);return a(e,{})}catch(t){if(t.details&&"loading document failed"==t.details.code)return null;throw t}}}};export default t;
//# sourceMappingURL=walker.min.js.map
