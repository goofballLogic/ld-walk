const walker={walk(a,b={}){async function c(a){try{const b=await g.expand(a);return h(b,{})}catch(a){if(a.details&&"loading document failed"==a.details.code)return null;throw a}}async function d({pathContext:a,walkFrom:b,walkTo:f,lastFetched:g,query:i,suppressFinalDereferencing:j}){const k=await e(a,f);g||(i=await c(b),g=b);let l=0;for(;i&&i.query&&k.length;){const a=k.shift();l++;const b=`> ${a}`;let d=i.query(b);if(!d){const a=i.query("> @id");if(a){g=a;const e=await c(a);d=e&&e.query(b)}}i=d}if(!j&&i&&i.query){const a=i.query("> @id");a&&a!==g&&(i=(await c(a))||i)}const m=f.split(" "),n={walked:m.slice(0,l),toQuery:a=>i&&h(i.json(),a||{}),continueTo:(b,c)=>i?d({...c,pathContext:a,walkTo:b,lastFetched:g,query:i}):n,succeeded:!!i};return n.succeeded||(n.notWalked=m.slice(l)),n}async function e(a,b){const c={"@context":a,"@graph":b.split(" ").map(function(a){return{[a]:[]}})},d=await g.expand(c);return d.map(a=>Object.keys(a)[0])}function f(a,b){return{pathContext:a,walkFrom:b,to:(c,e)=>d({...e,pathContext:a,walkFrom:b,walkTo:c})}}const g=b.jsonld,h=b["ld-query"];return{pathContext:a,from:f.bind(this,a)}}};export default walker;
